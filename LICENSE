MIT License

Copyright (c) 2025 Eq0926

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

#!/usr/bin/env python3
"""
iOS Bug Fix Assistant - An open source tool to help identify and fix common iOS bugs in GitHub repositories
"""

import os
import re
import argparse
import requests
from github import Github
from typing import List, Dict, Optional

# Common iOS bug patterns and their fixes
IOS_BUG_PATTERNS = {
    # Memory management issues
    'strong_reference_cycle': {
        'pattern': r'\[self\] in',
        'description': 'Potential strong reference cycle in closure',
        'fix': '[weak self] in',
        'file_types': ['.swift']
    },
    
    # UI updates not on main thread
    'ui_not_on_main': {
        'pattern': r'UIView\.|UIKit\.|UICollectionView|UITableView|UILabel|UIButton',
        'description': 'UI update might not be on main thread',
        'fix': 'DispatchQueue.main.async { /* UI update code */ }',
        'file_types': ['.swift', '.m', '.h']
    },
    
    # Force unwrapping optionals
    'force_unwrap': {
        'pattern': r'!\s*$|!\s*[;\)\]]',
        'description': 'Force unwrapping optional value',
        'fix': 'Consider using if-let or guard-let instead',
        'file_types': ['.swift']
    },
    
    # Deprecated API usage
    'deprecated_api': {
        'pattern': r'@available\(.*deprecated',
        'description': 'Using deprecated API',
        'fix': 'Update to newer API version',
        'file_types': ['.swift', '.m', '.h']
    }
}

class iOSBugFixer:
    def __init__(self, github_token: str, repo_name: str):
        self.github = Github(github_token)
        self.repo = self.github.get_repo(repo_name)
        self.results = []
    
    def analyze_repository(self) -> List[Dict]:
        """
        Analyze the repository for common iOS bugs
        """
        contents = self.repo.get_contents("")
        self._analyze_contents(contents)
        return self.results
    
    def _analyze_contents(self, contents):
        for content in contents:
            if content.type == "dir":
                self._analyze_contents(self.repo.get_contents(content.path))
            else:
                self._check_file_for_bugs(content)
    
    def _check_file_for_bugs(self, content):
        filename = content.name
        file_extension = os.path.splitext(filename)[1]
        
        for bug_name, bug_info in IOS_BUG_PATTERNS.items():
            if file_extension in bug_info['file_types']:
                try:
                    file_content = content.decoded_content.decode('utf-8')
                    lines = file_content.split('\n')
                    
                    for line_num, line in enumerate(lines, 1):
                        if re.search(bug_info['pattern'], line):
                            self.results.append({
                                'file': content.path,
                                'line': line_num,
                                'bug_type': bug_name,
                                'description': bug_info['description'],
                                'current_code': line.strip(),
                                'suggested_fix': bug_info['fix']
                            })
                except Exception as e:
                    print(f"Error processing {content.path}: {str(e)}")
    
    def create_fix_branch(self, branch_name: str = "ios-bug-fixes") -> bool:
        """
        Create a new branch for fixes
        """
        try:
            main_ref = self.repo.get_git_ref('heads/main')
            self.repo.create_git_ref(
                ref=f'refs/heads/{branch_name}',
                sha=main_ref.object.sha
            )
            return True
        except Exception as e:
            print(f"Error creating branch: {str(e)}")
            return False
    
    def create_pull_request(self, title: str, body: str, base: str = "main", head: str = "ios-bug-fixes") -> bool:
        """
        Create a pull request with the fixes
        """
        try:
            pr = self.repo.create_pull(
                title=title,
                body=body,
                base=base,
                head=head
            )
            return True
        except Exception as e:
            print(f"Error creating PR: {str(e)}")
            return False

def main():
    parser = argparse.ArgumentParser(description="iOS Bug Fix Assistant")
    parser.add_argument('--token', required=True, help='GitHub personal access token')
    parser.add_argument('--repo', required=True, help='GitHub repository in format owner/repo')
    parser.add_argument('--analyze', action='store_true', help='Analyze repository for bugs')
    parser.add_argument('--fix', action='store_true', help='Create branch and PR with fixes')
    args = parser.parse_args()
    
    fixer = iOSBugFixer(args.token, args.repo)
    
    if args.analyze:
        print(f"Analyzing {args.repo} for common iOS bugs...")
        results = fixer.analyze_repository()
        
        if not results:
            print("No common iOS bugs found!")
            return
        
        print("\nFound potential issues:")
        for issue in results:
            print(f"\nFile: {issue['file']}, Line: {issue['line']}")
            print(f"Type: {issue['bug_type']}")
            print(f"Description: {issue['description']}")
            print(f"Current code: {issue['current_code']}")
            print(f"Suggested fix: {issue['suggested_fix']}")
            print("-" * 50)
    
    if args.fix:
        print("Creating fix branch...")
        if fixer.create_fix_branch():
            print("Branch created successfully!")
            # In a real implementation, we would actually apply fixes here
            # For this example, we'll just create the PR
            if fixer.create_pull_request(
                title="iOS Bug Fixes",
                body="This PR addresses several common iOS issues found by the iOS Bug Fix Assistant"
            ):
                print("Pull request created successfully!")
            else:
                print("Failed to create pull request")
        else:
            print("Failed to create branch")

if __name__ == "__main__":
    main()
